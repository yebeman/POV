#ifndef LED_LOGIC
#define LED_LOGIC


/*****
	TITLE: LED SETUP & CONTROL
	DEPENDENCY: SPI_LOGIC 
	ARRANGEMENT: 
	   |0| |1| |2| |3| |*| |*| |*| |*| |*| |*| |*| |*| |*| |*| |14| |15|
								     |T|
									 |L|
									 |C|
		
		LED starting from left/bottom
		selecting top - blue
		8 , 12,  9, 13, 14, 10, 15, 11,  7,  3,  6,  2,  1,  5,  0,  4   -> channel on the chip
		42, 18, 36, 12,  6, 30,  0, 24, 48, 72, 54, 78, 84, 60, 90, 66	 -> GSDL representation 
			
		GSDL => [4][4] => MAX 0xFF => MIN 0x00  byte long, we could have used 16 bits and cut it in half but our SPI supports 8 bits at a time
		
					GSDL    CH 	Type	0->15
					0	1	15	B		35,36
					2	3	15	G       37,38
					4	5	15	R		39,40
					6	7	14	B		23,24
					8	9	14	G		25,26
					10	11	14	R		27,28
					12	13	13	B		17,18
					14	15	13	G		19,20
					16	17	13	R		21,22
					18	19	12	B		5,6
					20	21	12	G		7,8
					22	23	12	R		9,10
					24	25	11	B		41,42
					26	27	11	G		43,44
					28	29	11	R		45,46
					30	31	10	B		29,30
					32	33	10	G		31,32
					34	35	10	R		33,34
					36	37	9	B		11,12
					38	39	9	G		13,14
					40	41	9	R		15,16
					42	43	8	B		0,1
					44	45	8	G		2,3
					46	47	8	R		4,5
					48	49	7	B		47,48
					50	51	7	G		49,50
					52	53	7	R		51,52
					54	55	6	B		59,60
					56	57	6	G		61,62
					58	59	6	R		63,64
					60	61	5	B		77,78
					62	63	5	G		79,80
					64	65	5	R		81,82
					66	67	4	B		89,90
					68	69	4	G		91,92
					70	71	4	R		94,95
					72	73	3	B		53,54
					74	75	3	G		55,56
					76	77	3	R		57,58
					78	79	2	B		65,66
					80	81	2	G		67,68	
					82	83	2	R		69,70	
					84	85	1	B		71,72	
					86	87	1	G		73,74
					88	89	1	R		75,76
					90	91	0	B		83,84
					92	93	0	G		85,86
					94	95	0	R		87,88
									 
									 
									 
	YEBE
*/
	
	

// (6 + 3) * 16 = 144 => 16 * 144 => 2304 => /using 8bits since ATMEGA SPI supports 8bits at a time for full duplex/ => 2304*2=4608



// gives access to 9*16*3 => 2304 leds  => Arranged in => B,G,R
// this is an asociation of address of GSDL with array number so 000 -> translates in to GSDL[42]
const byte startBottomNowWeHere[] =	{42,43,44,45,46,47,		//  8
								18,19,20,21,22,23,		// 12
								36,37,38,39,40,41,		//  9
								12,13,14,15,16,17,		// 13
								6,7,8,9,10,11,			// 14
								30,31,32,33,34,35,		// 10
								0,1,2,3,4,5,			// 15
								24,25,26,27,28,29,		// 11
								48,49,50,51,52,53,		//  7
								72,73,74,75,76,77,		//  3
								54,55,56,57,58,59,		//  6
								78,79,80,81,82,83,		//  2
								84,85,86,87,88,89,		//  1
								60,61,62,63,64,65,		//  5
								90,91,92,93,94,95,		//  0
								66,67,68,69,70,71};		//  4
								
long adjustedGSDL[NUMBER_OF_BOARD][NUMBER_OF_LED_PER_BOARD][NUMBER_OF_SUBLED_PER_LED];

// define fonts. 
// it is 8x6. eg -> ! could be expressed as => 0x00,0x00,0x00,0x6f,0x00,0x00
// 
// 00000000
// 01101111          <= seen from this direction looks like ! ;) 
// 00000000
//

const unsigned char collectionOfCharacters[][6] = {
	{0x00,0x00,0x00,0x6f,0x00,0x00},   // !
	{0x00,0x00,0x07,0x00,0x07,0x00},   // "
	{0x00,0x14,0x7f,0x14,0x7f,0x14},   // # 
	{0x00,0x00,0x07,0x04,0x1e,0x00},   // $ 
	{0x00,0x23,0x13,0x08,0x64,0x62},   // % 
	{0x00,0x36,0x49,0x56,0x20,0x50},   // & 
	{0x00,0x00,0x00,0x07,0x00,0x00},   // ' 
	{0x00,0x00,0x1c,0x22,0x41,0x00},   // ( 
	{0x00,0x00,0x41,0x22,0x1c,0x00},   // ) 
	{0x00,0x14,0x08,0x3e,0x08,0x14},   // * 
	{0x00,0x08,0x08,0x3e,0x08,0x08},   // + 
	{0x00,0x00,0x50,0x30,0x00,0x00},   // , 
	{0x00,0x08,0x08,0x08,0x08,0x08},   // - 
	{0x00,0x00,0x60,0x60,0x00,0x00},   // . 
	{0x00,0x20,0x10,0x08,0x04,0x02},   // / 
	{0x00,0x3e,0x51,0x49,0x45,0x3e},   // 0 
	{0x00,0x00,0x42,0x7f,0x40,0x00},   // 1 
	{0x00,0x42,0x61,0x51,0x49,0x46},   // 2 
	{0x00,0x21,0x41,0x45,0x4b,0x31},   // 3 
	{0x00,0x18,0x14,0x12,0x7f,0x10},   // 4 
	{0x00,0x27,0x45,0x45,0x45,0x39},   // 5 
	{0x00,0x3c,0x4a,0x49,0x49,0x30},   // 6 
	{0x00,0x01,0x71,0x09,0x05,0x03},   // 7 
	{0x00,0x36,0x49,0x49,0x49,0x36},   // 8
	{0x00,0x06,0x49,0x49,0x29,0x1e},   // 9 
	{0x00,0x00,0x36,0x36,0x00,0x00},   // : 
	{0x00,0x00,0x56,0x36,0x00,0x00},   // ; 
	{0x00,0x08,0x14,0x22,0x41,0x00},   // < 
	{0x00,0x14,0x14,0x14,0x14,0x14},   // = 
	{0x00,0x00,0x41,0x22,0x14,0x08},   // > 
	{0x00,0x02,0x01,0x51,0x09,0x06},   // ? 
	{0x00,0x3e,0x41,0x5d,0x49,0x4e},   // @ 
	{0x00,0x7e,0x09,0x09,0x09,0x7e},   // A 
	{0x00,0x7f,0x49,0x49,0x49,0x36},   // B 
	{0x00,0x3e,0x41,0x41,0x41,0x22},   // C 
	{0x00,0x7f,0x41,0x41,0x41,0x3e},   // D 
	{0x00,0x7f,0x49,0x49,0x49,0x41},   // E
	{0x00,0x7f,0x09,0x09,0x09,0x01},   // F 
	{0x00,0x3e,0x41,0x49,0x49,0x7a},   // G 
	{0x00,0x7f,0x08,0x08,0x08,0x7f},   // H 
	{0x00,0x00,0x41,0x7f,0x41,0x00},   // I 
	{0x00,0x20,0x40,0x41,0x3f,0x01},   // J 
	{0x00,0x7f,0x08,0x14,0x22,0x41},   // K 
	{0x00,0x7f,0x40,0x40,0x40,0x40},   // L 
	{0x00,0x7f,0x02,0x0c,0x02,0x7f},   // M 
	{0x00,0x7f,0x04,0x08,0x10,0x7f},   // N 
	{0x00,0x3e,0x41,0x41,0x41,0x3e},   // O 
	{0x00,0x7f,0x09,0x09,0x09,0x06},   // P 
	{0x00,0x3e,0x41,0x51,0x21,0x5e},   // Q 
	{0x00,0x7f,0x09,0x19,0x29,0x46},   // R 
	{0x00,0x46,0x49,0x49,0x49,0x31},   // S
	{0x00,0x01,0x01,0x7f,0x01,0x01},   // T 
	{0x00,0x3f,0x40,0x40,0x40,0x3f},   // U 
	{0x00,0x0f,0x30,0x40,0x30,0x0f},   // V 
	{0x00,0x3f,0x40,0x30,0x40,0x3f},   // W 
	{0x00,0x63,0x14,0x08,0x14,0x63},   // X 
	{0x00,0x07,0x08,0x70,0x08,0x07},   // Y 
	{0x00,0x61,0x51,0x49,0x45,0x43},   // Z 
	{0x00,0x3c,0x4a,0x49,0x29,0x1e},   // [ 
	{0x00,0x02,0x04,0x08,0x10,0x20},   // \ // 
	{0x00,0x00,0x41,0x7f,0x00,0x00},   // ] 
	{0x00,0x04,0x02,0x01,0x02,0x04},   // ^ 
	{0x00,0x40,0x40,0x40,0x40,0x40},   // _ 
	{0x00,0x00,0x00,0x03,0x04,0x00},   // ` 
	{0x00,0x20,0x54,0x54,0x54,0x78},   // a 
	{0x00,0x7f,0x48,0x44,0x44,0x38},   // b
	{0x00,0x38,0x44,0x44,0x44,0x20},   // c
	{0x00,0x38,0x44,0x44,0x48,0x7f},   // d 
	{0x00,0x38,0x54,0x54,0x54,0x18},   // e
	{0x00,0x08,0x7e,0x09,0x01,0x02},   // f
	{0x00,0x0c,0x52,0x52,0x52,0x3e},   // g
	{0x00,0x7f,0x08,0x04,0x04,0x78},   // h 
	{0x00,0x00,0x44,0x7d,0x40,0x00},   // i 
	{0x00,0x20,0x40,0x44,0x3d,0x00},   // j 
	{0x00,0x00,0x7f,0x10,0x28,0x44},   // k 
	{0x00,0x00,0x41,0x7f,0x40,0x00},   // l 
	{0x00,0x7c,0x04,0x18,0x04,0x78},   // m 
	{0x00,0x7c,0x08,0x04,0x04,0x78},   // n 
	{0x00,0x38,0x44,0x44,0x44,0x38},   // o 
	{0x00,0x7c,0x14,0x14,0x14,0x08},   // p 
	{0x00,0x08,0x14,0x14,0x18,0x7c},   // q 
	{0x00,0x7c,0x08,0x04,0x04,0x08},   // r 
	{0x00,0x48,0x54,0x54,0x54,0x20},   // s 
	{0x00,0x04,0x3f,0x44,0x40,0x20},   // t 
	{0x00,0x3c,0x40,0x40,0x20,0x7c},   // u 
	{0x00,0x1c,0x20,0x40,0x20,0x1c},   // v 
	{0x00,0x3c,0x40,0x30,0x40,0x3c},   // w 
	{0x00,0x44,0x28,0x10,0x28,0x44},   // x 
	{0x00,0x0c,0x50,0x50,0x50,0x3c},   // y 
	{0x00,0x44,0x64,0x54,0x4c,0x44},   // z
	{0x00,0x00,0x08,0x36,0x41,0x41},   // { 
	{0x00,0x00,0x00,0x7f,0x00,0x00},   // |
	{0x00,0x41,0x41,0x36,0x08,0x00},   // }
	{0x00,0x04,0x02,0x04,0x08,0x04},   // ~ 
};


const unsigned char collectionOfCharactersGuide[] = {	'!','"','#','$','%','&','\'','(',')','*',
														'+',',','-','.','/','0','1','2','3','4',
														'5','6','7','8','9',':',';','<','=','>',
														'?','@','A','B','C','D','E','F','G','H',
														'I','J','K','L','M','N','O','P','Q','R',
														'S','T','U','V','W','X','Y','Z','[','\\',
														']','^','_','`','a','b','c','d','e','f',
														'g','h','i','j','k','l','m','n','o','p',
														'q','r','s','t','u','v','w','x','y','z',
														'{','|','}','~'};
															
const int charCollectionSize = sizeof(collectionOfCharactersGuide);

#include "LED_LOGIC.c"
#endif